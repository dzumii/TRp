import Button from 'react-bootstrap/Button';
import ButtonGroup from 'react-bootstrap/ButtonGroup';
import { useNavigate } from "react-router-dom";
import Card from 'react-bootstrap/Card';

export const Dumpstr = () => {
  const navigate = useNavigate();

  const dumpstrA = () => {
    navigate("/tools/dumpstr/dumpstranalysis");
  };

  const dumpstrR = () => {
    navigate("/tools/dumpstr/dumpstrresult");
  };

  return (
    <>
      <h1>DumpSTR </h1>
      <ButtonGroup size="lg" className="mb-2">
        <Button variant="light" onClick={dumpstrA} className='card-button'>New Analysis</Button>
        <Button variant="light" onClick={dumpstrR} className='card-button'>Results</Button>
      </ButtonGroup>
      <Card style={{ padding: '0px' }}>
        <Card.Body >
          <div class="Compare">
            <div class="Compare__1hUWQ">
              <div class="MuiPaper-root Home_paper__1euug MuiPaper-outlined MuiPaper-rounded">



                <p>Please see full documentation and examples
                  <a href="https://trtools.readthedocs.io/en/latest/source/dumpSTR.html" > here</a>
                </p>
                <p>
                  Users are also advised to run this tool offline in cases where the dataset is heavy. Instructions on how to install and run this tool offline is available
                  <a href="https://github.com/gymreklab/TRTools" > here</a>
                </p>


                <ol>
                  <h3 className='card-title'>Usage</h3>
                  <p>DumpSTR filters VCF files with TR genotypes, performing call-level and locus-level filtering, and outputs a filtered VCF file. </p>


                  <h3 className='card-title'>Required Parameters:</h3>
                  <ul>
                    <li>vcf (VCF): VCF file to filter that has been generated by a supported genotyping tool.</li>

                  </ul>

                  <h3 className='card-title'>Other general parameters:</h3>

                  <ul>
                    <li>vcftype (string): Which genotyping tool generated the input VCF. Default = auto. Necessary if it cannot be automatically inferred. One of: gangstr, advntr, hipstr, eh, popstr..</li>
                    <li>num-records (int): only process this many records from the input VCF file.</li>
                  </ul>

                  <h3 className='card-title'>Outputs</h3>
                  <p>DumpSTR will output a filtered VCF file named dump.vcf, a sample log file dump.samplog.tab, and a locus log file dump.loclog.tab. See a description of output files below.</p>


                  <h3 className='card-title'>Filter Options</h3>
                  <p>DumpSTR offers the following types of filters:</p>

                  <h3 className='card-title'>Locus-level filters</h3>
                  <p>These filters are not specific to any tool and can be applied to any VCF file:</p>

                  <ul>
                    <li>min-locus-callrate (float): Filters loci with too few calls.</li>
                    <li>min-locus-hwep (float): Filters loci departing from Hardy Weinberg equilibrium at some p-value threshold. Based on a two-sided binomial test comparing the observed vs. expected percent of calls that are homozygous.</li>
                    <li>min-locus-het (float): Filters loci with low heteroyzgosity.</li>
                    <li>max-locus-het (float): Filters loci with high heterozygosity </li>
                    <li>filter-regions (BEDFILE,BEDFILE12,...): Filter TRs overlapping the specified set of regions. Must be used with --filter-regions-names. Can supply a comma-separated list to each to apply multiple region filters. Bed files must be sorted and tabix-indexed. </li>
                    <li>filter-regions-names (string,string2,...): Filter names for each BED file specified in --filter-regions. </li>
                  </ul>

                  <h3 className='card-title'>Call-level filters</h3>
                  <h3 className='card-title'>AdVNTR call-level filters</h3>
                  <ul>
                    <li>advntr-min-spanning (int): Minimum spanning read count (SR field). </li>
                    <li>advntr-min-flanking (int): Minimum flanking read count (FR field). </li>
                    <li>advntr-min-ML(float): Minimum value of maximum likelihood (ML field). </li>
                  </ul>

                  <h3 className='card-title'>ExpansionHunter call-level filters</h3>
                  <ul>

                    <li>eh-min-call-LC (int): Minimum call coverage. Based on LC field. </li>
                    <li>eh-max-call-LC (int): Maximum call coverage. Based on LC field. </li>
                  </ul>

                  <h3 className='card-title'>GangSTR call-level filters</h3>
                  <ul>
                    <li>gangstr-min-call-DP (int): Minimum call coverage. Based on DP field. </li>
                    <li>gangstr-max-call-DP (int): Maximum call coverage. Based on DP field. </li>
                    <li>gangstr-min-call-Q(float): Minimum call quality score. Based on Q field. </li>
                    <li>gangstr-expansion-prob-het(float): Expansion prob-value threshold. Filters calls with probability of heterozygous expansion less than this. Based on QEXP field. </li>
                    <li>gangstr-expansion-prob-hom(float): Expansion prob-value threshold. Filters calls with probability of homozygous expansion less than this. Based on QEXP field. </li>
                    <li>gangstr-expansion-prob-total(float): Expansion prob-value threshold. Filters calls with probability of homozygous or heterozygous expansion less than this. Based on QEXP field. </li>
                    <li> </li>
                  </ul>

                  <h3 className='card-title'>PopSTR call-level filters</h3>
                  <ul>
                    <li>popstr-min-call-DP (int): Minimum call coverage. Based on DP field. </li>
                    <li>popstr-max-call-DP (int): Maximum call coverage. Based on DP field. </li>
                    <li>popstr-require-support (int): Require each allele call to have at least n supporting reads. Based on AD field. </li>
                  </ul>




                  <h3 className='card-title'>Metrics to stratify results:</h3>
                  <ul>
                    <li>stratify-fields: Comma-separated list of FORMAT fields to stratify by. e.g. DP,Q.</li>
                    <li>stratify-binsizes: Comma-separated list of min:max:binsize to stratify each field on. Must be same length as --stratify-fields. e.g. 0:50:5,0:1:0.1 . The range [min, max] is inclusive.</li>
                    <li>stratify-file: Specify which file to look at the --stratify-fields in. If set to 0, apply to both files. If set to 1, apply only to --vcf1. If set to 2, apply only to --vcf2.</li>
                  </ul>

                  <h3 className='card-title'>Plotting options:</h3>
                  <ul>
                    <li>bubble-min: Minimum x/y axis value to display on bubble plots.</li>
                    <li>bubble-max: Maximum x/y axis value to display on bubble plots.</li>
                  </ul>

                </ol>
              </div>
            </div>
          </div>
        </Card.Body>;
      </Card>

    </>
  );
}